<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>computer on Oxygen&#39;s 生活札記</title>
    <link>https://oxygentw.net/categories/computer/</link>
    <description>Recent content in computer on Oxygen&#39;s 生活札記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sun, 03 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://oxygentw.net/categories/computer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Apache Server 隱藏敏感性資訊設定</title>
      <link>https://oxygentw.net/blog/computer/apache-hide-sensitive-info/</link>
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/apache-hide-sensitive-info/</guid>
      <description>紀錄 Apache Server 的一些基礎安全設定，可以避免伺服器版本號或作業系統等機敏性資料輕易的被取得，雖然說真的有心人士要攻擊的話這些簡單的設定應該也防不了，不過總是多一分保障啦，至少可以擋一些技術不成熟的攻擊者啊XD

ServerTokens ServerToken 的等級決定 Apache 回傳給用戶的 Response header 裡面伺服器系統資訊的多寡。
Syntax : ServerTokens Major|Minor|Min[imal]|Prod[uctOnly]|OS|Full

詳細參數說明參考 httpd.apache.org 的文件
   參數 說明 Response header 範例     Full 全部顯示 Server: Apache/2.0.41 (Unix) PHP/4.2.2 MyMod/1.2   OS 詳細伺服器軟體版本號與作業系統 Server: Apache/2.0.41 (Unix)   Min(imal) 詳細伺服器軟體版本號 Server: Apache/2.0.41   Minor 伺服器軟體版本號 Server: Apache/2.0   Major 精簡伺服器軟體版本號 Server: Apache/2   Prod(uctOnly) 僅顯示伺服器軟體 Server: Apache    
ServerSignature ServerSignature 決定是否在網頁回應預設錯誤 HTTP status page 時顯示伺服器詳細資訊，這裡面提供的資料可詳細了，還是關掉會安全一點。
ServerSignature On -&amp;gt; ServerSignature Off

Root Directory Indexes 修改此設定能避免網頁目錄裡沒有 index 的時候整個目錄被看光光，防止進一步讓攻擊者了解網站架構。
&amp;lt;Directory /var/www/&amp;gt; Options Indexes FollowSymLinks ... &amp;lt;/Directory&amp;gt;  拿掉 Indexes 改成
&amp;lt;Directory /var/www/&amp;gt; Options FollowSymLinks ... &amp;lt;/Directory&amp;gt;  
expose_php 若有安裝 php 建議到 php.ini 也關閉掉 expose_php，這能讓用戶知道這台伺服器有沒有安裝 php，雖然不會有直接威脅，但依據我的經驗，很多被我找到 vulnerability 的網站都是用 php&amp;hellip; 所以如果有 php 我就會特別積極的去找XD 避免自己伺服器有這樣的遭遇還是關了吧！
expose_php = On -&amp;gt; expose_php = Off

參考資料 http://bojack.pixnet.net/blog/post/3941260-apache-%E5%AE%89%E5%85%A8%E6%80%A7%E8%AA%BF%E6%A0%A1%E7%AF%87 http://ms7.fhsh.tp.edu.tw/php5c/ini.core.html</description>
    </item>
    
    <item>
      <title>架設家用伺服器 PART 0 — 準備硬體</title>
      <link>https://oxygentw.net/blog/computer/homeserver/0-prepare-hardware/</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/homeserver/0-prepare-hardware/</guid>
      <description>樹苺派是一款微電腦，話雖如此，他也擁有一般 Linux 電腦的所有功能，只是性能較差一點，因此用他來架設流量不會太大的家用伺服器，畢竟只有家人會用到而已嘛，用樹苺派有以下優點
 沒有風扇，靜音 低耗電量 機體小巧  說缺點當然也是有
 運算能力較差 不能承受大流量  那廢話不多說，我們從買材料開始吧！
必須準備的物品  Raspberry Pi 2 / 3 約1495元
 micro SD 容量 8GB以上，速度 Class 10 / UHS 1 以上 約300元
 2A/5V 電源供應器 約100元
 micro USB cable 約100元
 網路線 約30元
 HDMI 連接線 約200元
 一台螢幕
  
可選擇的物品  VGA 轉 HDMI線 約250元 Wi-Fi 網卡(RPi 則免) 約250元 Raspberry Pi 保護殼 約100元 Raspberry Pi 專用散熱片 約15元(通常買樹苺派會送)  一切都準備好後就可以進入下一步囉 -&amp;gt; 安裝系統

Picture source: https://www.maxpixel.net/Technology-Tech-Raspberry-Pi-Device-Electronic-3676379</description>
    </item>
    
    <item>
      <title>架設家用伺服器 PART 2 — 設定系統</title>
      <link>https://oxygentw.net/blog/computer/homeserver/2-system-setting/</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/homeserver/2-system-setting/</guid>
      <description>DietPi 有預裝 Dropbear SSH Server，機器安裝好系統開機後即可透過 SSH 連入伺服器，預設IP是 192.168.0.100，也可以接上螢幕透過螢幕來設定，我們使用 KITTY 來做 SSH 操作。
透過 SSH 連線 在 Host Name 的地方輸入主機位置，Port 輸入 SSH連接埠號(預設22)，就可以建立連線，連進去後會被詢問帳號密碼。
預設帳號：root
預設密碼：dietpi

進行 dietpi-config 設定 成功進入系統只是第一步，作業系統會自動引導你進行 dietpi-update 做作業系統的升級，升級後我們得去 dietpi-config 設定系統。
選擇 DietPi-Config 進入設定頁面

進入這個畫面，我們分別對以下進行設定，我以我個人的需求示範，若你有其他需求務必自行修改，不要盲目照抄我的設定，改壞了頂多重灌，不會把機器弄壞的。

記憶體分配 Display Options -&amp;gt; GPU/RAM Memory Split -&amp;gt; Server 16 MB GPU | 1008 MB RAM

超頻設定 Performance Options -&amp;gt; Overclocking -&amp;gt; none 1200 MHz ARM

CPU 分配 Performance Options -&amp;gt; CPU Throttle Up -&amp;gt; 85

系統語系 Language/Regional Options -&amp;gt; Locale -&amp;gt; en_US.UTF-8

系統時區 Language/Regional Options -&amp;gt; Timezone -&amp;gt; Asia -&amp;gt; Taipei

Root 密碼 Security Options -&amp;gt; Change Root Password -&amp;gt; 新的Root密碼

主機名稱 Security Options -&amp;gt; Change Hostname -&amp;gt; 新主機名稱

網路設定 Network Options: Adapters -&amp;gt; 參考進階網路設定

NTP 伺服器設定 Network Options: NAS/Misc -&amp;gt; NTPD Mirror -&amp;gt; asia.pool.ntp.org

接著離開 DietPi-Config，系統會要求重新開機，重新開機後系統設定就完成了。
下一步 -&amp;gt; DietPi-Software 軟體安裝</description>
    </item>
    
    <item>
      <title>架設家用伺服器 Part 1 — 安裝系統</title>
      <link>https://oxygentw.net/blog/computer/homeserver/1-home-server-install-os/</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/homeserver/1-home-server-install-os/</guid>
      <description>有了所有需要的硬體材料後，就像組電腦一樣，第一步要進行的就是安裝作業系統，沒有系統就不能開機了啊！
我們開始吧！
STEP 1 : 下載必要軟體  SD Card formatter 用來格式化記憶卡的工具
 USB Image Tool  燒錄映像檔到記憶卡的工具  
STEP 2 : 下載映像檔 我採用 DietPi 輕量化系統，預設沒有 GUI ，它是基於 Raspbian 優化和輕量化，並加入許多好用工具程式的作業系統，如果不喜歡也可以換成自己想要的，可以參考這個網頁 Raspberry Pi 的基礎 - 40 套作業系統任你選 。

STEP 3 : 格式化記憶卡 打開 SD Formatter ，並確定記憶卡的磁碟編號，萬萬要仔細確認 !!!!!! 如果不小心格式化到其他裝置資料會全部消失，選項設定最好是選擇覆寫格式化，那樣清的最乾淨，不過經過我多次測試快速格式化也沒問題，速度會快很多，邏輯大小調整選擇 (ON)

STEP 4 : 燒錄映像檔 這也要仔細檢查磁區編號，燒錯地方也是檔案全部毀損&amp;hellip;.選擇要燒錄的記憶卡，按 restore 並選擇剛剛下載的映像檔，他就會自己開始把系統燒錄至記憶卡了。

STEP 5 : 設定 config.txt 其實燒錄完成後就可以啟動系統了，但如果你是用 HDMI 轉 VGA 的方式連接螢幕可能會有開機沒畫面的現象，解決方法很簡單，只需要把SD卡插進電腦，找到一個叫 config.txt 的檔案，用記事本打開後搜尋以下參數，並修改成下列的設定！
hdmi_group=2
hdmi_mode=16
hdmi_drive=2
hdmi_force_hotplug=1
config_hdmi_boost=4

如果要設定連接 Wi-Fi，那再開啟 dietpi.txt，修改以下組態
AUTO_SETUP_NET_WIFI_ENABLED=1
AUTO_SETUP_NET_WIFI_SSID=YOUR_SSID
AUTO_SETUP_NET_WIFI_KEY=YOUR_PASSWORD

STEP 6 : 啟動系統 把記憶卡插進樹莓派的記憶卡插槽，接上螢幕、電源，就完成系統安裝囉！
接著我們來進行系統設定 -&amp;gt; 系統設定
參考資料 : http://www.arthurtoday.com/2014/05/raspberry-pi-hdmi-to-vga-how-to.html https://www.flickr.com/photos/christiaancolen/21133467186</description>
    </item>
    
    <item>
      <title>C Standard Library QSort 函式</title>
      <link>https://oxygentw.net/blog/computer/c-standard-library-qsort/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/c-standard-library-qsort/</guid>
      <description>前些天很意外地得知學校程式設計居然是教 C語言，非工程相關應該不需要學到這種中階語言才對吧…… 好歹來個 C++ 啊 !!!!
抱怨歸抱怨，課還是得上，只好重新翻閱C的標準函式庫複習一下，結果在裡面挖到很多好用的東西呢XD 其中 stdlib.h 的 qsort 函式我覺得最驚喜，我一直以為只有 C++ 的 STL library才有 sort()，沒想到C語言也有！ 不過用法有點複雜，紀錄一下。

Function Prototype
 void qsort(void* base, size_t n, size_t size, int (cmp)(const void, const void*))
  base 是被排序陣列的指標 n 是被排序陣列的大小 = sizeof(array)/sizeof(array_type) size 是陣列中元素的大小 = sizeof(array_type) 最後是指向比較函數的指標  
指向比較函數的指標比較特別，就像 STL sort 如果要改變排序方向的話必須傳入第三個參數，自行定義的比較函數。
範例如下：
int cmpfunc (const void * a, const void * b) { return ( *(int*)a - *(int*)b ) }  傳入 a,b 兩參數型別是 void ，需要強制轉型成被排序陣列的型別，如範例中 a,b 先被強制轉型成整數指標 (int)，再對他取值做處理。
完整範例 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; void printIntArr(int *arr,int arrSize) {for(int i=0; i&amp;lt;arrSize; i++) {printf(&amp;#34;%d &amp;#34;,arr[i]);} printf(&amp;#34;\n&amp;#34;);}int cmpfunc (const void * a, const void * b) {return *(int*)a - *(int*)b;}int main (){int arr[] = { 56, 45, 48, 12, 4, 3, 4568, 45, 48, 213, 54, 32, 4, 8, 9, 6, 4, 23, 0, -2, 56 };printIntArr(arr,(sizeof(arr)/sizeof(int)));qsort(arr,sizeof(arr)/sizeof(int),sizeof(int),cmpfunc); //Quick sort printIntArr(arr,(sizeof(arr)/sizeof(int)));return 0;} 

輸出結果:</description>
    </item>
    
    <item>
      <title>Python Requests 套件</title>
      <link>https://oxygentw.net/blog/computer/python-requests/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/python-requests/</guid>
      <description>透過 Python 做數據分析或網路爬蟲時幾乎一定會上網下載網頁原始碼或其他 HTTP 請求，因此 Requests 這個套件非常重要，他簡單又實用，不過我從來沒有詳細研究過他，趁現在有時間把他的文件閱讀了一遍。
套件資訊  License: Apache Software License (Apache 2.0) Author: Kenneth Reitz Requires: Python &amp;gt;=2.6, !=3.0., !=3.1., !=3.2., !=3.3.  
安裝套件 pip install requests  
使用方法 1.引入 import requests

2.HTTP GET r = requests.get(&amp;#39;https://api.github.com/events&amp;#39;)

3.HTTP POST r = requests.post(&amp;#39;http://httpbin.org/post&amp;#39;, data = {&amp;#39;key&amp;#39;:&amp;#39;value&amp;#39;})

4.PUT, DELETE, HEAD, OPTIONS 請求 r = requests.put(&amp;#39;http://httpbin.org/put&amp;#39;, data = {&amp;#39;key&amp;#39;:&amp;#39;value&amp;#39;})r = requests.delete(&amp;#39;http://httpbin.org/delete&amp;#39;)r = requests.head(&amp;#39;http://httpbin.org/get&amp;#39;)r = requests.options(&amp;#39;http://httpbin.org/get&amp;#39;)

5.傳遞 URLs 參數 當 URLs 參數的 dictionary 裡可以把 list 當成一個項目，但不可以加入 None的項目。 payload = {&amp;#39;key1&amp;#39;: &amp;#39;value1&amp;#39;, &amp;#39;key2&amp;#39;: &amp;#39;value2&amp;#39;}r = requests.get(&amp;#39;http://httpbin.org/get&amp;#39;, params=payload)print(r.url) #查看傳送的 URL

6.回應資料分析 從回應中取出各種我們需要的資料
print(r.text) #列出文字 print(r.encoding) #列出編碼 print(r.status_code) #列出 HTTP 狀態碼 print(r.headers) #列出 HTTP Response Headers print(r.headers[&amp;#39;Content-Type&amp;#39;]) #印出 Header 中的 Content-Type 
7.解析 JSON 資料 如果取得的是 json 格式資料，requests 有內建解析函式。
r = requests.get(&amp;#39;https://api.github.com/events&amp;#39;)r.json() 
8.自訂 Header 許多時候網站會擋掉 UA 是 python-request 的請求，因此我們很常需要自訂 Header
url = &amp;#39;https://api.github.com/some/endpoint&amp;#39;headers = {&amp;#39;user-agent&amp;#39;: &amp;#39;Mozilla/5.0&amp;#39;}r = requests.get(url, headers=headers) 
9.設定 Timeout 避免程式在維修中或故障的網站停留太久，或是用來檢查是否可存取時很方便。
requests.get(&amp;#39;http://github.com&amp;#39;, timeout=[SECOND]) 
10.指定編碼 通常網站會使用 UTF-8 編碼，但若不是，可用這個方法修改讀取編碼。
r.encoding = &amp;#39;ISO-8859-1&amp;#39; 
11.取得 Cookie url = &amp;#39;http://example.com/some/cookie/setting/url&amp;#39;r = requests.get(url)r.cookies[&amp;#39;example_cookie_name&amp;#39;]

12 .修改 Cookie url = &amp;#39;http://httpbin.org/cookies&amp;#39;cookies = dict(cookies_are=&amp;#39;working&amp;#39;)r = requests.get(url, cookies=cookies)r.text

參考資料 https://pypi.org/project/requests/
https://github.com/requests/requests
http://docs.python-requests.org/en/master/user/quickstart/</description>
    </item>
    
    <item>
      <title>Urlretrieve 的 Python3 寫法</title>
      <link>https://oxygentw.net/blog/computer/urlretrieve-python3/</link>
      <pubDate>Sat, 18 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/urlretrieve-python3/</guid>
      <description>要透過 urllib.urlretrieve 從網頁裡下載圖片，卻發現腳本報錯 AttributeError: module &#39;urllib&#39; has no attribute &#39;urlretrieve&#39;，原來是因為 Python3 後的寫法已經改變了，改法如下。

引入的部分
import urllib 改成 import urllib.request  呼叫的部分
urllib.urlretrieve(URL, &amp;quot;FILENAME&amp;quot;) 改成 urllib.request.urlretrieve(URL, &amp;quot;FILENAME&amp;quot;)  修改後即可正常運作！</description>
    </item>
    
    <item>
      <title>網頁伺服器強制使用 HTTPS 安全連線</title>
      <link>https://oxygentw.net/blog/computer/apache-server-force-https/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/apache-server-force-https/</guid>
      <description>今天在處理轉移主機 SSL 的問題，重新申請憑證後我用 Why No Padlock? 來檢查憑證是否正確安裝，我發現有一項 Force HTTPS 檢查未通過，於是照著他的指示修改檔，讓使用者以後如果使用 HTTP 訪問我的 Apache 網頁伺服器會強制轉成由 HTTPS 訪問。

在 .htaccess 裡加入以下三行 把yourSite.com的地方改成你的網址，注意第一行裡網址遇到”.”前面要加\
RewriteCond %{HTTP_HOST} yourSite\.com [NC] RewriteCond %{SERVER_PORT} 80 RewriteRule ^(.*)$ https://yourSite.com/$1 [R,L]  OK 這樣就完成了。</description>
    </item>
    
    <item>
      <title>PHP 5 ↔ 7 版本轉換</title>
      <link>https://oxygentw.net/blog/computer/php7-downgrade-to-php5/</link>
      <pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/php7-downgrade-to-php5/</guid>
      <description>在 LAMP 的環境下有時會遇到 PHP 版本和服務需求不符的情況，有點麻煩，上網找了一下論壇發現有方法可以解決，在此紀錄一下。
環境: Ubuntu Server 16.04 LTS
關閉 Apache2 模組
sudo a2dismod proxy_fcgi proxy; sudo service apache2 restart

下載 PHP 所需套件
sudo add-apt-repository ppa:ondrej/php sudo apt-get update sudo apt-get install php7.0 php5.6 php5.6-mysql php-gettext php5.6-mbstring php-mbstring php7.0-mbstring php-xdebug libapache2-mod-php5.6 libapache2-mod-php7.0  
一切準備好後，升級和降級分別為以下兩種方法
將 PHP 從 5.6 升到 7.0
sudo a2dismod php5.6 ; sudo a2enmod php7.0 ; sudo service apache2 restart
將 PHP 從 7.0 升到 5.6
sudo a2dismod php7.0 ; sudo a2enmod php5.6 ; sudo service apache2 restart

參考資料 https://askubuntu.com/questions/761713/how-can-i-downgrade-from-php-7-to-php-5-6-on-ubuntu-16-04</description>
    </item>
    
    <item>
      <title>Linux Server Network interface 基本設定</title>
      <link>https://oxygentw.net/blog/computer/linux-server-network-interface-basic-setup/</link>
      <pubDate>Tue, 24 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/linux-server-network-interface-basic-setup/</guid>
      <description>伺服器安裝過程中設定固定IP是很重要的一個步驟，雖然簡單卻不可大意，interface 要是改錯伺服器會無法連網，若是透過SSH維護就得跑一趟機房了，因此我記錄一下伺服器的基本網路設定。
以 Ubuntu Server 16.04 LTS 發行版為例

備份原設定檔並編輯設定檔 sudo cp /etc/network/interface /etc/network/interface.backup sudo vim /etc/network/interface  設定固定 IP auto lo iface lo inet loopback #修改以下部分 auto eth0 iface eth0 inet static # static = 固定 IP。 address 203.72.xxx.xxx # IP 位址。 netmask 255.255.255.0 # 子網路遮罩。 gateway 203.72.xxx.xxx # 預設閘道位置。 dns-nameservers 168.95.1.1 8.8.8.8 # DNS Server(以空格分開)  重新啟動網路服務 sudo service networking restart  
若修改後發現網路有問題，就把 interface 刪除， interface.backup 改名為 interface 並重新啟動網路服務應該會修好</description>
    </item>
    
    <item>
      <title>架設 VoIP Server</title>
      <link>https://oxygentw.net/blog/computer/use-umurmur-build-voip-server/</link>
      <pubDate>Sat, 07 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/use-umurmur-build-voip-server/</guid>
      <description>來試試 VoIP Server，以前都沒想過可以自己架，最近心血來潮找了找，找到 umurmur 這套軟體，他是用C語言寫成的輕量級伺服器軟體，還可以安裝在 openWRT 路由器之類的設備上喔！

環境: Ubuntu Server 16.04
軟體: umurmur
下載原始碼 目前最新版本0.2.17 sudo wget https://github.com/umurmur/umurmur/archive/0.2.17.zipsudo unzip 0.2.17.zip -d /optcd /opt/umurmur-0.2.17 
安裝必要套件 sudo apt-get updatesudo apt-get install libconfig-dev libprotobuf-c-dev libssl-dev cmake build-essential 
編譯程式並安裝 cd ..sudo mkdir umurmur-buildcd umurmur-buildsudo cmake ../umurmur-0.2.17/ -DSSL=opensslsudo makesudo make install 
修改組態 sudo vim /usr/local/etc/umurmur.conf welcometext = &amp;ldquo;歡迎詞&amp;rdquo;;
password = &amp;ldquo;VoIP Password&amp;rdquo;;
max_users = 最大連線數;
bindport = VoIP 服務 Port; bindaddr = &amp;ldquo;VoIP 服務 Address&amp;rdquo;;

設定頻道資訊 name = &amp;ldquo;頻道名稱&amp;rdquo;;
parent = &amp;ldquo;上層頻道名稱&amp;rdquo;;
description =&amp;ldquo;頻道描述&amp;rdquo;;
noenter=true/false; #是否禁止進入
silent = true/false; #是否為安靜模式
position = 0/1/2/3&amp;hellip;&amp;hellip; #同層頻道排列順序，依照字母排序
password = &amp;ldquo;頻道密碼&amp;rdquo;;
設定範例 channels = ( { name = &amp;#34;Root&amp;#34;; parent = &amp;#34;&amp;#34;; description = &amp;#34;Root channel. No entry.&amp;#34;; noenter = true; }, { name = &amp;#34;Lobby&amp;#34;; parent = &amp;#34;Root&amp;#34;; description = &amp;#34;Lobby channel&amp;#34;; }, { name = &amp;#34;Silent&amp;#34;; parent = &amp;#34;Root&amp;#34;; description = &amp;#34;Silent channel&amp;#34;; silent = true; # Optional. Default is false }, { name = &amp;#34;Team A&amp;#34;; parent = &amp;#34;Lobby&amp;#34;; description = &amp;#34;The Team A channel&amp;#34;;position = 0; # Optional. Default is 0 and the channels will be shown in alphabetic order.# password = &amp;#34;nopassword&amp;#34;;},{name = &amp;#34;Team B&amp;#34;;parent = &amp;#34;Lobby&amp;#34;;description = &amp;#34;The Team B channel&amp;#34;;position = 1; # Optional.</description>
    </item>
    
    <item>
      <title>ubuntu 升級作業系統版本</title>
      <link>https://oxygentw.net/blog/computer/ubuntu-do-release-upgrade/</link>
      <pubDate>Mon, 19 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/ubuntu-do-release-upgrade/</guid>
      <description>我管理的伺服器有一台是 ubuntu 14.04，看了好討厭喔XD 就決定把它升級成 16.04。

先更新套件管理工具
sudo apt-get update

升級套件
sudo apt-get upgrade

升級目前系統
sudo apt-get dist-upgrade

關鍵來了！升級作業系統版本的指令，執行後依序回答他跑出來的問題，等他跑完就更新好。
sudo do-release-upgrade

最後做個收尾
sudo apt-get autoremove sudo reboot  完成，很簡單吧！但我更新後有遇到一些小問題，例如 14.04 使用 php5.6，而 16.04 是 php7.0，Apache就出了點問題，需要更換 php 版本才能正常運作，不過整體上都是不會有差別的。</description>
    </item>
    
    <item>
      <title>使用 gitea 自行架設 git 伺服器</title>
      <link>https://oxygentw.net/blog/computer/use-gitea-build-own-git-server/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/use-gitea-build-own-git-server/</guid>
      <description>雖然說有 github 的免費服務可以用，但有時候若程式碼不想公開又需要用到 git 版本管理就會有些不方便，既然現在有空伺服器，就幫學校架一個吧！也分享安裝過程給其他想自己架設 git server 的人。
我使用 gitea 這套用 go 語言開發的開源，第一步到 gitea 的 GitHub 依照自己的作業系統下載主程式。
我以 ubuntu server 為例。
  
如果不知道自己電腦是什麼架構可以用arch指令查詢
arch 
下載完成後，因為主程式會自動生成一些檔案，先把它移到安裝目錄下並把程式名稱改短一點
sudo mkdir /opt/giteasudo mv gitea-1.4.0-rc3-linux-amd64 /opt/gitea/giteacd /opt/giteasudo chmod +x gitea 
安裝前我們還需要 Mysql 資料庫，若已安裝可略過這步。
#Installsudo apt-get updatesudo apt-get install mysql-server#Configuremysql_secure_installation 
接著在 Mysql 中創建一個給 gitea 使用的資料庫，這邊我就不贅述了，不會操作的話可以參考網路上的這篇文章。
啟動主程式，gitea預設會使用 port 3000，防火牆記得允許！
sudo ./gitea 
用瀏覽器訪問你伺服器的 port 3000，依照安裝頁面設定。 設定完後按立即安裝，等他一會兒就自動安裝好了！
    
再次訪問 gitea 看到這畫面安裝就完成啦！不過還差一步，把 gitea 設成系統服務。
  在/etc/init.d新增一個檔案
sudo touch /etc/init.d/giteasudo chmod +x /etc/init.d/gitea 
複製這個網頁裡的文字到剛剛新建的檔案，找到以下內容並修改。
(這檔案適用 ubuntu/debian，其他作業系統可以到這頁面找找)
DESC=&amp;#34;對這個軟體的描述&amp;#34;NAME=giteaSERVICEVERBOSE=yesPIDFILE=/var/run/$NAME.pidSCRIPTNAME=/etc/init.d/$NAMEWORKINGDIR=安裝目錄路徑DAEMON=$WORKINGDIR/$NAMEDAEMON_ARGS=&amp;#34;web&amp;#34;USER=用來啟動 gitea 的使用者 
啟動服務
sudo /etc/init.d/gitea start  檢查是否成功啟動
sudo lsof -i :gitea 的監聽 port | grep LISTEN

出現這樣就是成功
gitea 15793 root 8u IPv6 15140468 0t0 TCP *:x11 (LISTEN) 完成！</description>
    </item>
    
    <item>
      <title>Ubuntu 安裝 node.js 和 redis 資料庫</title>
      <link>https://oxygentw.net/blog/computer/ubuntu-install-nodejs-and-redis/</link>
      <pubDate>Sat, 17 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/ubuntu-install-nodejs-and-redis/</guid>
      <description>團隊職位更換後我負責管理伺服器，服務後端需要用到 node.js 和 Redis，順手記錄一下安裝過程。
安裝 node.js
curl -sL https://deb.nodesource.com/setup_9.x | sudo -E bash - sudo apt-get install -y nodejs 
檢查 node.js 版本
node -vv9.5.0 
安裝 Redis sudo apt-get updatesudo apt-get install redis-server

檢查redis伺服器狀態
netstat -nlt|grep 6379 
執行 redis-cli 測試
127.0.0.1:6379&amp;gt; keys *(empty list or set) 
為了保護資料庫，必須設置資料庫密碼，修改 /etc/redis/redis.conf。
取消註解 requirepass 並設置密碼

為了讓遠端主機可以存取 Redis，找到 bind 127.0.0.1 這行，將允許訪問資料庫的IP補上去
Example:
bind 127.0.0.1 192.168.1.156 #允許所有主機連入 bind 0.0.0.0
重新啟動資料庫
sudo service redis restart Redis 遠端連線指令 redis-cli -a [Redis Password] -h [Remote Host Address]

參考資料 https://github.com/nodesource/distributions
http://blog.fens.me/linux-redis-install/</description>
    </item>
    
    <item>
      <title>允許 Mysql 從外網存取</title>
      <link>https://oxygentw.net/blog/computer/allow-mysql-access-from-internet/</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/allow-mysql-access-from-internet/</guid>
      <description>開發 node.js 應用程式時需要遠端存取 Mysql 資料庫，即使遠端主機的防火牆都允許 Mysql 的埠號了卻還是一直連接失敗，Google 後才發現原來是 Mysql 設定檔中預設只允許本機連入的關係，只要修改一行設定即可開放外網存取的權限。
編輯 /etc/mysql/mysql.conf.d/mysqld.cnf

將 bind-address(紅框處)的127.0.0.1 改成 0.0.0.0， 允許所有主機連入。

再 sudo service mysql restart 重新啟動資料庫即可。</description>
    </item>
    
    <item>
      <title>WSL — Windows 下的原生 Ubuntu 系統</title>
      <link>https://oxygentw.net/blog/computer/windows-subsystem-for-linux/</link>
      <pubDate>Sat, 21 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/windows-subsystem-for-linux/</guid>
      <description>WSL(Windows Subsystem for Linux) 是由 Microsoft 和 Canonical 共同開發，讓使用者可以在 Windows 系統下原生執行 Linux 二進制執行檔，並提供了一個 Bash 以及其他 Linux 內和所支援的功能。若你是開發者，你將可以在 Windows 下編譯原生 ELF 格式檔案，也可以使用 make 等等開發工具。
先加入測試人員組建，確定把 Windows 10 升級到 16215.0 以上，而且要是 64 位元系統(現在大多數都是了)。
直接到 Microsoft 市集搜尋 linux 找到自己喜歡的發行版並安裝它，我以 Ubuntu 為例。Microsoft Store 連結

安裝完成後啟動，應該會看到這個錯誤，這是因為系統還沒有啟動 WSL 的功能。
Installation Failed! Error: 0x8007887e

以系統管理員身分執行 PowerShell，輸入以下指令來啟動 WSL
Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux

完成後 PowerShell 會叫你重新啟動電腦以完成設定，就重新啟動吧~
重新啟動後再開啟 Ubuntu 這個「應用程式」，它會自動開始安裝。
等它個幾分鐘，完成後會叫你設定帳號和密碼，設定完就可以使用 Ubuntu 了！


接下來的用法就和正常的 Linux 一樣，既然一樣，你可能會想說裝個 GUI 來用，嗯&amp;hellip;&amp;hellip;建議不要，我試過安裝 KDE-Desktop 和 Xfce4，KDE 會有程式崩潰的問題，Xfce 雖然不會，但仍然很不穩定，動不動就會 X server 無法啟動或是 GUI 崩潰，所以建議目前先不要安裝 GUI，就當作是 SSH 遠端來使用吧！等到更新幾次之後再試看看。
有了這個後寫程式真的變得異常方便啊！不需要開一整個虛擬機就有 Linux 可以用，有 make 是多麼美好的一件事~ 順帶一提，Windows 原本的 C槽路徑會是 /mnt/c，而D槽是 /mnt/d 以此類推。</description>
    </item>
    
    <item>
      <title>Linux 壓縮檔相關指令</title>
      <link>https://oxygentw.net/blog/computer/linux-zip-file-command/</link>
      <pubDate>Wed, 27 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/linux-zip-file-command/</guid>
      <description>在使用 Linux Server 的時候常常需要使用命令列介面解壓縮，因為沒有 GUI 啊！那麼多種壓縮檔，每個指令又那麼像&amp;hellip;&amp;hellip;每次要用都得查一次，不如我就來整理一番！
zip 相關套件 zip unzip
壓縮 zip fileName.zip Directory
解壓 unzip fileName.zip

rar 相關套件 rar
壓縮 rar a fileName.rar Directory
解壓 rar e fileName.rar

tar 相關套件 tar (應該內建都有)
壓縮 tar cvf fileName.tar Directory
解壓 tar xvf fileName.tar

gz 相關套件 gzip
壓縮 gzip fileName.gz Directory
解壓 gzip -d fileName.gz

tgz 相關套件 tar
壓縮 tar zcvf fileName.tgz file
解壓 tar zxvf fileName.tgz

bz 相關套件 bzip2
壓縮 ??
解壓 bzip2 -d fileName.bz

bz2 相關套件 bzip2
壓縮 bzip2 -z fileName.bz2 Directory
解壓 bzip2 -d fileName.bz2

Z 相關套件 tar
壓縮 compress fileName
解壓 uncompress fileName.Z

7z 相關套件 7zip-full 壓縮 7z a fileName.7z Directory [-pPASSWOWD]
解壓 7z x fileName.xz

xz 相關套件 xz-utils
壓縮 xz -z fileName
解壓 xz -d fileName.xz

lha 相關套件 lha
壓縮 lha -a fileName.lha Directory
解壓 lha -e fileName.lha
tar.gz 相關套件 tar
壓縮 tar zcvf fileName.gz Directory
解壓 tar zxvf fileName.gz

tar.bz 相關套件 tar
壓縮 ??
解壓 tar jxvf fileName.tar.bz

tar.bz2 相關套件 tar
壓縮 tar jcvf fileName.tar.bz2 Directory
解壓 tar jxvf fileName.tar.bz2

tar.xz 相關套件 tar
壓縮 tar Jcvf fileName.tar.xz Directory
解壓 tar Jxvf fileName.tar.xz

tar.z 相關套件 tar
壓縮 tar Zcvf fileName.tar.z Directory
解壓 tar Zxvf fileName.</description>
    </item>
    
    <item>
      <title>Linux 安裝 Go 語言環境</title>
      <link>https://oxygentw.net/blog/computer/linux-install-go-environment/</link>
      <pubDate>Sun, 24 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/linux-install-go-environment/</guid>
      <description>Go 是 Google 開發的程式語言，語法和 C語言 相似，但變數宣告並不相同，而且有垃圾回收機制，我接觸一下 Go 語言後就愛上它了，它可以非常方便的建立 Web 服務，加上 goroutine 的非阻塞式執行函式等等的功能，它還可以開發 Android 和 ios 的應用程式，Go 所編譯出來的都是原生二進制執行檔，不會像 Python 一樣部署的時候一堆檔案亂七八糟的很麻煩，同時也可以保護程式碼的安全！
現在就來安裝 Go 的開發環境吧~

這又是簡單到不行的一個安裝，只須以下幾個步驟
更新套件資料庫與升級 sudo apt-get update sudo apt-get upgrade  
安裝 Go 語言套件 sudo apt-get install golang

檢查是否成功安裝，成功則會顯示類似文字 : go version go1.6.2 linux/amd64
go version

查看 Go 環境參數 go env

完成 !</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 獨立重複白努力試驗模擬</title>
      <link>https://oxygentw.net/blog/notes/cpp-bernoulli-trial-simulation/</link>
      <pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/notes/cpp-bernoulli-trial-simulation/</guid>
      <description>數學課上到這部分，依據大數法則，試驗的次數越多，結果會越相似於常態分佈，但丟硬幣100次都嫌累了，根本沒辦法看出甚麼所以然來，這時電腦就好用了，寫個小程式，數分鐘內幫你丟五億次硬幣! 還可以更多呢!
/* * Bernoulli Trial simulation * By C++ * License MIT * 2017/09/19 oxygen */ #include &amp;lt;iostream&amp;gt; #include &amp;lt;fstream&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;ctime&amp;gt; using namespace std; //Global Variable unsigned long long sample = 0,run_time = 0; void init() { fstream fp; fp.open(&amp;quot;data.txt&amp;quot;,ios::out); fp&amp;lt;&amp;lt;&amp;quot;id,true,false,True-rate,False-rate\n&amp;quot;; fp.close(); srand( (unsigned)time(NULL)); cout&amp;lt;&amp;lt;&amp;quot;Program is running...\n&amp;quot;; } bool Random() { unsigned int ran = (int)((rand() / (RAND_MAX+1.0)) * (10 - 1 + 1.0) + 1); if(ran % 2 == 0) return true; return false; } void write_file(const int id,const unsigned long long True_number,const unsigned long long False_number) { fstream fp; fp.open(&amp;quot;data.txt&amp;quot;,ios::out|ios::app); fp&amp;lt;&amp;lt;id&amp;lt;&amp;lt;&amp;quot;,&amp;quot;&amp;lt;&amp;lt;True_number&amp;lt;&amp;lt;&amp;quot;,&amp;quot;&amp;lt;&amp;lt;False_number&amp;lt;&amp;lt;&amp;quot;,&amp;quot;&amp;lt;&amp;lt;(True_number/(double)run_time)*100&amp;lt;&amp;lt;&amp;quot;%,&amp;quot;&amp;lt;&amp;lt;(False_number/(double)run_time)*100&amp;lt;&amp;lt;&amp;quot;%\n&amp;quot;; fp.close(); } int main() { cout&amp;lt;&amp;lt;&amp;quot;How many times do yo want to run? &amp;gt;&amp;quot;; cin &amp;gt;&amp;gt; sample; cout&amp;lt;&amp;lt;&amp;quot;How many times do yo want to run in one sample(n)? &amp;gt;&amp;quot;; cin &amp;gt;&amp;gt; run_time; init(); for(int c=0; c&amp;lt;sample; c++) { unsigned long long True_number = 0,False_number = 0; for(unsigned long long i=0; i&amp;lt;run_time; i++) { if(Random()) True_number++; else False_number++; } write_file(c+1,True_number,False_number); } cout&amp;lt;&amp;lt;&amp;quot;Complete!\n&amp;quot;; }  解釋一下程式碼
init() 是程式一開始執行的函式，會把輸出檔案的標題輸出好，並初始化亂數器。
Random() 是最主要的部份，會隨機取出1~10的數字，如果是偶數則當作成功，回傳 true ，若是奇數則做為失敗，回傳 false。
write_file() 很簡單，把每一筆計算過的結果寫入檔案，參數需傳入[樣本編號][成功次數][失敗次數]，他便會算出比率並寫入檔案。
main() 會先詢問使用者要執行幾回，每回有幾次試驗，輸入完後就會執行 init() 做初始化，隨後開始自動計數，每當 Random() 回傳 true 成功加一，回傳 false 失敗加一，直到達到使用者設定的次數，變數因為希望可以儲存很大的數字，所以我宣告 unsigned long long，理論上可以儲存到 18446744073709551615 這麼大的數字，但我實際測試到十四億就不行了，還在找原因中&amp;hellip;&amp;hellip;

我把程式寫完後就遠端送到 Linux 去處理，性能比較好些，於是我也寫了 Makefile。
# Makefile of Bernoulli Trial simulation all:Bernoulli-Trial-simulation.cpp g++ Bernoulli-Trial-simulation.cpp -o Bernoulli-Trial-simulation clean: rm -f Bernoulli-Trial-simulation  超簡單的 Makefile XD就只是編譯和移除兩行指令而已，但能只打 make 就編譯還是比較方便 !</description>
    </item>
    
    <item>
      <title>Linux 架設 Minecraft Server</title>
      <link>https://oxygentw.net/blog/computer/linux-minecraft-server/</link>
      <pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/linux-minecraft-server/</guid>
      <description>如果有人有玩 Minecraft 應該會覺得這遊戲就是要多人才好玩吧，但架伺服器拿自己家裡的電腦就不能長時間開機，不然很耗電! IP設定也大多需要 Hamachi，比較不方便，如果把 Minecraft Server和有其他服務的伺服器放在一起，就可以順便用一點點資源借來玩遊戲啦! 通常伺服器用 Linux系統，所以我就用 Linux教學囉~
示範主機為 CentOS 7
Minecraft 是用 Java寫的，所以先檢查有沒有安裝 Java，如果沒有就去裝一下吧。
java -version

接著，我們新增一個 Minecraft Server 的資料夾
mkdir minecraft_server cd minecraft_server  
再來下載伺服器軟體，有官方載點和水桶載點等等，如果有架過就選自己喜歡的，沒有的話就用官方的就行了，沒有差很多。 官方伺服器軟體:
wget https://s3.amazonaws.com/Minecraft.Download/versions/1.12/minecraft_server.1.12.jar
或是從 Bukkit 網站 下載後放入伺服器

新增一個文件 run.sh，這是用來開啟伺服器的bash，-Xms 後加上伺服器最小記憶體用量， -Xmx則是最大用量。
nohup java -Xms256M -Xmx512M -jar minecraft_server.1.12.jar &amp;amp;

然後以 root 權限執行他，執行後不會成功啟動，但資料夾裡會多出一些檔案，我們等等要修改他。
 sh run.sh 

修改 elua.txt elua=false 改成elua=true

修改 server.properties 加入兩行字
server-ip=你的IP位置
online-mode=true/false #是否驗證正版，如果希望迷版也可以玩就設false，不希望反之。

接著再用 root 執行一次
sh run.sh 伺服器就會開啟，如要查看log檔可以去 nohup.out 或 log的資料夾裡看</description>
    </item>
    
    <item>
      <title>Linux 使用終端機製作開機碟</title>
      <link>https://oxygentw.net/blog/computer/linux-use-terminal-makebootdisk/</link>
      <pubDate>Sat, 15 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/linux-use-terminal-makebootdisk/</guid>
      <description>之前需要在 linux 的環境下製作 server 的開機碟，但我不會用給 linux 的燒錄工具（有內建工具，只是我懶所以就直接用終端機處理XD）於是就來分享一下做法~
我使用的作業系統是 linux lite(Ubuntu)
先查看 USB 在哪個位置（不能看錯噢！等等映像燒錯磁碟會非常可怕&amp;hellip;)
lsblk

卸載磁碟來進行後續步驟，USB 位置填剛剛 lsblk 查到的位置。
umount /media/user/149C-FF09

再來要格式化磁碟，記得先備份 USB 裡的東西。 以我的電腦而言是 /dev/sdb 你的或許不同，千萬不要照抄
sudo mkfs.vfat /dev/sdb

如果遇到這個錯誤就加個 -I 參數: mkfs.vfat: Device partition expected, not making filesystem on entire device &amp;lsquo;/dev/sdb&amp;rsquo; (use -I to override)
sudo mkfs.vfat -I /dev/sdb

接者寫入映像檔，if(input file) 填入映像檔路徑，of(output file) 填入要寫入的路徑
sudo dd if=/home/user/download/ubuntu-16.04.2-server-amd64.iso of=/dev/sdb

燒錄需要一點時間，等他跑完就完成了！</description>
    </item>
    
    <item>
      <title>Fancy App 1</title>
      <link>https://oxygentw.net/series/item1/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/series/item1/</guid>
      <description> App 1 </description>
    </item>
    
    <item>
      <title>windows &amp; Linux 雙系統 grub 被覆蓋的解決方法</title>
      <link>https://oxygentw.net/blog/computer/windows-linux-grub/</link>
      <pubDate>Sat, 15 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/windows-linux-grub/</guid>
      <description>有時候在電腦上安裝 Linux和 Windows雙系統時，如果 Windows比 Linux晚裝，或是 Windows重灌，都有可能導致 grub不能正常作用，一開機直接進入 Windows，其實修正他不會很難，只有下面幾個步驟。
首先，找到一個 Linux的開機 USB或 Live CD，用他開機，進入 Linux系統，開啟終端機。
輸入 fdisk -l

找到 Linux的開機磁區，通常是 /boot 或 / ，我的是 sdb5 /boot。
接著輸入(如果 bootloader在/ 就把 boot改成 root，磁碟編號自行修改)
mount /dev/sdb5 /mnt sudo grub-install --boot-directory=/mnt/ /dev/sdb5  
這樣就能從 grub進入到原本的 Linux系統了。
reboot

把 USB移除，回到原本的 Linux開終端機輸入
sudo update-grub

這時 grub就會去找硬碟上的作業系統，下次就可以正常用 grub選單選擇系統了!</description>
    </item>
    
    <item>
      <title>Ubuntu 安裝 WordPress</title>
      <link>https://oxygentw.net/blog/computer/ubuntu-install-wordpress/</link>
      <pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://oxygentw.net/blog/computer/ubuntu-install-wordpress/</guid>
      <description>WordPress 是一個非常好用的網站架設工具，但我覺得他網頁版的免費方案擴充功能不夠完善，還會有廣告，只好花點時間自己在伺服器上安裝，這樣就沒有方案的問題了。

不過一般人家裡不適合放一臺主機，組一臺主機很貴啊。。。而且還要確保供電不中斷，電費也是一筆開銷，所以如果要自己架，可以使用網路上 openshift 的主機，或是使用樹莓派來架設，樹莓派是一種微電腦，耗電小，體積小，功能也齊全，只要不要做太大型的運算，基本上都很穩定！

廢話不多說，開啓終端機進入安裝步驟，伺服器必須預裝好 LAMP 喔！
1.登入MySQL
sudo mysql -u root -p;

2.創建MySQL資料庫
CREATE DATABASE DB_NAME;

3.創建MySQL用戶
GRANT ALL ON wordpress.* TO &#39;USERNAME&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;PASSWORD&#39;;

4.更新
FLUSH PRIVILEGES;

5.退出MySQL
quit;

6.啓用.htaccess
sudo vim /etc/apache2/apache2.conf

7.把Directory區塊中的AllowOverride的值設定爲All

8.重新啓動模組
sudo a2enmod rewrite

9.檢查組態檔
sudo apache2ctl configtest

10.伺服器重啓
sudo service apache2 restart

11.下載WordPress 版本可自行修改成最新版本
cd /tmp curl -O https://tw.wordpress.org/wordpress-4.7.3-zh_TW.tar.gz  
12.解壓縮
tar xzvf wordpress-4.7.3-zh_TW.tar.gz

13.創建 .htaccess文件並修改權限
touch /tmp/wordpress/.htaccess chmod 660 /tmp/wordpress/.htaccess  
14.創建組態文件
cp /tmp/wordpress/wp-config-sample.php /tmp/wordpress/wp-config.php

15.將WordPress 複製到網站根目錄 (注意!會清除所有伺服器根目錄的檔案)
sudo rm -rf /var/www/html/* sudo cp -a /tmp/wordpress/. /var/www/html  
16.更改WordPress 目錄權限 (把LINUX-USER換成自己的linux帳戶)
sudo chown –R LINUX-USER:www–data /var/www/html

17.更改WordPress 根目錄權限
sudo find /var/www/html -type d -exec chmod g+s {} \; sudo chmod g+w /var/www/html/wp-content sudo chmod -R g+w /var/www/html/wp-content/themes sudo chmod -R g+w /var/www/html/wp-content/plugins  
17.編輯WordPress 配置文件
sudo vim /var/www/html/wp-config.php 分別修改資料庫名稱、用戶名稱、用戶密碼  
18.添加一行文字，防止插件安裝出現FTP認證界面
define(&#39;FS_METHOD&#39;, &#39;direct&#39;);

19.設置密鑰—取得密鑰
curl -s https://api.wordpress.org/secret-key/1.1/salt/

20.替換WordPress組態文件中的值

21.安裝完成！ 參考資料:http://blog.topspeedsnail.com/archives/4646</description>
    </item>
    
  </channel>
</rss>